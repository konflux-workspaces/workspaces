// Code generated by MockGen. DO NOT EDIT.
// Source: interface_test.go
//
// Generated by this command:
//
//	mockgen -source=interface_test.go -destination=mocks/readclient.go -package=mocks -exclude_interfaces=FakeIWMapper
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/konflux-workspaces/workspaces/operator/api/v1alpha1"
	clientinterface "github.com/konflux-workspaces/workspaces/server/persistence/clientinterface"
	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockFakeIWReadClient is a mock of FakeIWReadClient interface.
type MockFakeIWReadClient struct {
	ctrl     *gomock.Controller
	recorder *MockFakeIWReadClientMockRecorder
}

// MockFakeIWReadClientMockRecorder is the mock recorder for MockFakeIWReadClient.
type MockFakeIWReadClientMockRecorder struct {
	mock *MockFakeIWReadClient
}

// NewMockFakeIWReadClient creates a new mock instance.
func NewMockFakeIWReadClient(ctrl *gomock.Controller) *MockFakeIWReadClient {
	mock := &MockFakeIWReadClient{ctrl: ctrl}
	mock.recorder = &MockFakeIWReadClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFakeIWReadClient) EXPECT() *MockFakeIWReadClientMockRecorder {
	return m.recorder
}

// GetAsUser mocks base method.
func (m *MockFakeIWReadClient) GetAsUser(arg0 context.Context, arg1 string, arg2 clientinterface.SpaceKey, arg3 *v1alpha1.InternalWorkspace, arg4 ...client.GetOption) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAsUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAsUser indicates an expected call of GetAsUser.
func (mr *MockFakeIWReadClientMockRecorder) GetAsUser(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsUser", reflect.TypeOf((*MockFakeIWReadClient)(nil).GetAsUser), varargs...)
}

// ListAsUser mocks base method.
func (m *MockFakeIWReadClient) ListAsUser(arg0 context.Context, arg1 string, arg2 *v1alpha1.InternalWorkspaceList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAsUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListAsUser indicates an expected call of ListAsUser.
func (mr *MockFakeIWReadClientMockRecorder) ListAsUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAsUser", reflect.TypeOf((*MockFakeIWReadClient)(nil).ListAsUser), arg0, arg1, arg2)
}

// UserHasDirectAccess mocks base method.
func (m *MockFakeIWReadClient) UserHasDirectAccess(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserHasDirectAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserHasDirectAccess indicates an expected call of UserHasDirectAccess.
func (mr *MockFakeIWReadClientMockRecorder) UserHasDirectAccess(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserHasDirectAccess", reflect.TypeOf((*MockFakeIWReadClient)(nil).UserHasDirectAccess), arg0, arg1, arg2)
}
