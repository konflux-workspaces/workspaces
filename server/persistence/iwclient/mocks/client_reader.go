// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces_test.go
//
// Generated by this command:
//
//	mockgen -source=interfaces_test.go -destination=mocks/client_reader.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockFakeCRReader is a mock of FakeCRReader interface.
type MockFakeCRReader struct {
	ctrl     *gomock.Controller
	recorder *MockFakeCRReaderMockRecorder
}

// MockFakeCRReaderMockRecorder is the mock recorder for MockFakeCRReader.
type MockFakeCRReaderMockRecorder struct {
	mock *MockFakeCRReader
}

// NewMockFakeCRReader creates a new mock instance.
func NewMockFakeCRReader(ctrl *gomock.Controller) *MockFakeCRReader {
	mock := &MockFakeCRReader{ctrl: ctrl}
	mock.recorder = &MockFakeCRReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFakeCRReader) EXPECT() *MockFakeCRReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockFakeCRReader) Get(ctx context.Context, key client.ObjectKey, obj client.Object, opts ...client.GetOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockFakeCRReaderMockRecorder) Get(ctx, key, obj any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFakeCRReader)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockFakeCRReader) List(ctx context.Context, list client.ObjectList, opts ...client.ListOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, list}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockFakeCRReaderMockRecorder) List(ctx, list any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, list}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFakeCRReader)(nil).List), varargs...)
}
