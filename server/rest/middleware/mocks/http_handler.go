// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces_test.go
//
// Generated by this command:
//
//	mockgen -source=interfaces_test.go -destination=mocks/http_handler.go -package=mocks -exclude_interfaces=FakeCRCache,FakeSlogHandler
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFakeHTTPHandler is a mock of FakeHTTPHandler interface.
type MockFakeHTTPHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFakeHTTPHandlerMockRecorder
}

// MockFakeHTTPHandlerMockRecorder is the mock recorder for MockFakeHTTPHandler.
type MockFakeHTTPHandlerMockRecorder struct {
	mock *MockFakeHTTPHandler
}

// NewMockFakeHTTPHandler creates a new mock instance.
func NewMockFakeHTTPHandler(ctrl *gomock.Controller) *MockFakeHTTPHandler {
	mock := &MockFakeHTTPHandler{ctrl: ctrl}
	mock.recorder = &MockFakeHTTPHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFakeHTTPHandler) EXPECT() *MockFakeHTTPHandlerMockRecorder {
	return m.recorder
}

// ServeHTTP mocks base method.
func (m *MockFakeHTTPHandler) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockFakeHTTPHandlerMockRecorder) ServeHTTP(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockFakeHTTPHandler)(nil).ServeHTTP), arg0, arg1)
}
