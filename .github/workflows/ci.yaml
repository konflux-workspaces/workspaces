name: Server CI

on: # yamllint disable-line rule:truthy
  pull_request: {}
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  unit:
    name: Unit tests
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - directory: server
          - directory: operator

    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Run tests
        # todo: set up code coverage?
        run: make -C "${{ matrix.directory }}" test

  lint-go:
    name: Lint code
    runs-on: ubuntu-22.04

    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Determine golang-ci version
        id: golangci_version
        run: |
          echo "version=$(go mod edit -json hack/tools/golang-ci/go.mod | jq '.Require | map(select(.Path == "github.com/golangci/golangci-lint"))[].Version')" >> $GITHUB_OUTPUT

      - name: Lint with golang-ci
        uses: golangci/golangci-lint-action@v6
        with:
          version: ${{ steps.golangci_version.version }}
          working-directory: server

  # We need to render _every_ directory that has a kustomization.yaml file,
  # since that's what infra-deployments checks for.  Having a check identical
  # to what infra-deployments does will save us some embarassment when we make
  # a release.
  kubelinter:
    name: Kubelinter
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Render kustomize templates
        run: |
          mkdir out
          find operator server -name 'kustomization.yaml' | \
            xargs -I {} -n1 -P8 \
            bash -c 'dir=$(dirname "{}"); output_file=$(echo $dir | tr / -)-kustomization.yaml; if ! log=$(kustomize build "$dir" -o "out/$output_file" 2>&1); then echo "Error when running kustomize build for $dir: $log" && exit 1;fi'

      - name: Run kube-linter
        uses: stackrox/kube-linter-action@v1.0.4
        id: kube-linter-action-scan
        with:
          version: v0.6.8
          # Adjust this directory to the location where your kubernetes resources and helm charts are located.
          directory: out
          # The following two settings make kube-linter produce scan analysis in SARIF format which would then be
          # made available in GitHub UI via upload-sarif action below.
          format: sarif
          output-file: out/kube-linter.sarif
        # The following line prevents aborting the workflow immediately in case your files fail kube-linter checks.
        # This allows the following upload-sarif action to still upload the results to your GitHub repo.
        continue-on-error: true

      - name: Upload sarif report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: out/kube-linter.sarif

      - name: Pretty-print sarif report
        if: ${{ steps.kube-linter.outcome }} != "success"
        run: |
          cargo install sarif-fmt
          sarif-fmt -i out/kube-linter.sarif
